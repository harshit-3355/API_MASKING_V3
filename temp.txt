@app.route('/generate_all', methods=['GET'])
def generate_all():
    global cached_rows
    try:
        read_url = "https://ciparthenon-api.azurewebsites.net/apiRequest?account=demo&route=table/840520?api_version=2021.08"
        insert_url = "https://ciparthenon-api.azurewebsites.net/apiRequest?account=demo&route=data/840520/insert?api_version=2022.01"
        refresh_url = "https://ciparthenon-api.azurewebsites.net/apiRequest?account=demo&route=table/840520/reload?api_version=2022.1"

        # Step 1: Read all rows
        res = requests.get(read_url)
        res.raise_for_status()
        rows = res.json().get("data", [])

        base_uri_to_row = {}
        insert_data = []
        cached_rows = []

        for row in rows:
            base_uri = row.get("BASE_URI")
            if not base_uri:
                continue
            if base_uri not in base_uri_to_row:
                base_uri_to_row[base_uri] = row

        for base_uri, row in base_uri_to_row.items():
            already_set = all([
                row.get("UPDATED_URI"),
                row.get("PUBLIC_USERNAME"),
                row.get("PUBLIC_PASSWORD"),
                row.get("ADMIN_USERNAME"),
                row.get("ADMIN_PASSWORD")
            ])

            if already_set:
                insert_data.append({
                    "BASE_URI": row["BASE_URI"],
                    "UPDATED_URI": row["UPDATED_URI"],
                    "ADMIN_USERNAME": row["ADMIN_USERNAME"],
                    "ADMIN_PASSWORD": row["ADMIN_PASSWORD"],
                    "PUBLIC_USERNAME": row["PUBLIC_USERNAME"],
                    "PUBLIC_PASSWORD": row["PUBLIC_PASSWORD"]
                })
                cached_rows.append(row)
                continue

            # Generate new values
            key = Fernet.generate_key()
            fernet = Fernet(key)
            encrypted_token = fernet.encrypt(base_uri.encode()).decode()

            token_param = urllib.parse.quote(encrypted_token)
            key_param = urllib.parse.quote(key.decode())
            updated_uri = f"{request.host_url}demo?token={token_param}&key={key_param}"

            admin_user = random_username("admin")
            admin_pass = random_password()
            public_user = random_username("user")
            public_pass = random_password()

            new_entry = {
                "BASE_URI": base_uri,
                "UPDATED_URI": updated_uri,
                "ADMIN_USERNAME": admin_user,
                "ADMIN_PASSWORD": admin_pass,
                "PUBLIC_USERNAME": public_user,
                "PUBLIC_PASSWORD": public_pass
            }

            insert_data.append(new_entry)
            cached_rows.append(new_entry)

        # Step 2: Insert new + old merged rows
        insert_payload = {"data": insert_data}
        insert_res = requests.post(insert_url, json=insert_payload)
        print("üì§ Insert Status:", insert_res.status_code, insert_res.text)

        # Step 3: Refresh table
        refresh_payload = {"mode": "reload"}
        refresh_res = requests.post(refresh_url, json=refresh_payload)
        print("‚ôªÔ∏è Refresh Status:", refresh_res.status_code, refresh_res.text)

        return jsonify(cached_rows)

    except Exception as e:
        return jsonify({"error": str(e)}), 500